# Copyright 2021 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


name: db_search
description: |
  Launch a job to search through a given genetic database.
    Args:
        project (str):
            Required. Project to create the job in.
        location (Optional[str]):
            Location for creating the job in. If not set,
            default to us-central1.
        TBD
    Returns:
        TBD 
inputs:
- {name: project, type: String}
- {name: region, type: String, default: "us-central1"}
- {name: db_tool, type: String}
- {name: input_data, type: Dataset}
- {name: database_paths, type: String}
- {name: n_cpu, type: Integer, optional: True}
- {name: max_sto_sequences, type: Integer, optional: True}
- {name: maxseq, type: Integer, optional: True}
- {name: machine_type, type: String, default: "n1-standard-8"}
- {name: boot_disk_size, type: Integer, default: 100}
- {name: disk_image, type: String, default: "https://www.googleapis.com/compute/v1/projects/jk-mlops-dev/global/images/alphafold-datasets-jan-2022 3000"}
- {name: runner_image, type: String, default: "gcr.io/jk-mlops-dev/alphafold"}
outputs:
- {name: output_data, type: Dataset}
- {name: logging, type: Artifact}
implementation:
  container:
    image: gcr.io/jk-mlops-dev/alphafold-components
    args: 
      - --project
      - {inputValue: project}
      - --regions
      - {inputValue: region}
      - --machine-type
      - {inputValue: machine_type}
      - --boot-disk-size
      - {inputValue: boot_disk_size}
      - --logging
      - {outputUri: logging}
      - --mount
      - concat: [
            'DATABASES_ROOT=', {inputValue: disk_image}
        ]
      - --input
      - concat: [
            'INPUT_PATH=', {inputUri: input_data}
        ] 
      - --output
      - concat: [
            'OUTPUT_PATH=', {outputUri: output_data}
        ]
      - if:
          cond: {isPresent: n_cpu}
          then:
          - --env 
          - concat: [
              'N_CPU=', {inputValue: n_cpu}
          ]
      - if:
          cond: {isPresent: max_sto_sequences}
          then:
          - --env 
          - concat: [
              'MAX_STO_SEQUNCES=', {inputValue: max_sto_sequences}
          ]
      - if:
          cond: {isPresent: maxseq}
          then:
          - --env 
          - concat: [
              'MAXSEQ=', {inputValue: maxseq}
          ]
      - --executor_input
      - "{{$}}"
          
      
    
